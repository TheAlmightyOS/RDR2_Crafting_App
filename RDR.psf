<File version="3.1">
  <FileID>ccb3fc80-90ac-4939-8a45-3c515c17f18b</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAFvzSURBVHhe7d3ndxxnoh74e+yz3/b4D7A/7jn7
xftpvfbu2V37+Pr67r227x1NkkbSBGmURUrMAQRJEAQDQEQiEjmDAEnknHPOOeecG50DwrPvWw1Q
JNSjIUgAIlHPM/MTge7q6upqdL9PVVd3/w3DMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMCckof/Tv/yXdf/hP/z7OmfnG3U3b7rW3bjhQkRERO8IV1e3uq+++LzuX/2r/7lO
jOvSX8+/+Bf/ovPjjz5Gem4pOkcWMDC9jr7JNSIiInpHDExr0NI7Di+fh/g3//pfY3eI/+n8+3/3
7+rSckrRNraCivYxlLeNEBER0TukTKjunkbX6CLOnD33agXA2flmXffoEio7x1HVMUZERETvoEqh
bXQFOQWlr1YAXF1v143O65QLVosSQEREdFLUdk+irmfqjdR0TSjzkv86Ov8g5PIoyybmVdvzZssm
Ly/ns3dbq4SO8VVk5RW/WgFwcXGtG5nTiplMKgtGRER0EshBsqxlGLlV3cir7jmw3N1/qzrGUd87
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
GrIC4JJSITbzLdjQW4Ctdfj6+iCxoAiXL32CP378O/z6rCuq6yvgcu4b/OI3v0FcfCje//wyQh/d
hWd4GFZEe7CZJnD7n/8z/vd/+38jsnACtslKfOEaivS0WHjEZSEkxE8UgAHM9Y1gfkXDAkBERKrw
du4BMFkx2pyJix4R0Mo9ABYtVsba4PEwBMHRD/Hpnz7E44xchMTEwi/cD0GJ6Qi48Wc8DPLDxZA8
rE6UITjMA2KRYNL04+Hp+2jpaML1K66oqBEFwicW6c+icT8mE0FBXoiusr+sYNBpoXGwPERERCfN
23sMgFGDjHhXnL5wHc5XziErLwd+wWFIr+/CY/8HuHH3DrwTnyIpxhfOtx7g7NcfIjQqEjfCczHd
X4SI2EDM63egXx9E9NVYTNmAnrwAfPv5H3HaNx0F2YnwScpFREQwkhv70F3UgPHFdei5B4CIiFTg
7SwAglZvhFm3iq6WBjS2ditH8a8szmN5wwj92gyam5owsaiBeWMZHU2NaO3qx+LyCuYXV6BZX8Hi
0qLYmpeD+ToW5xaxvqGDYWMNQwN9mJxbwerKEhaWxHSLi1heW8HMyJT4V3Noy09ERPQ2e2sLgKTV
6mEym2E2m5T5yu8nlwtsfz+/WXkfv/ysgL1p9DoxyIvT5B4EvTjdPh8t9Ab5OQDiZ3G60WSCUUyj
E9PK6e3z1EInp+HgT0REKvFWFwAiIiI6GiwAREREKsQCQEREpEIsAERERCrEAkBERKRCLABEREQq
xAJARESkQiwAREREKsQCQEREpEIsAERERCrEAkBERKRCLABEREQqxAJARESkQiwAREREKsQCQERE
pEIsAERERCrEAkBERKRCLABEREQqxAJARESkQiwAREREKsQCQEREpEIsAERERCrEAkBERKRCLABE
REQqxAJARESkQiwAREREKsQCQEREpEIsAERERCrEAkBERKRCLABEREQqxAJARESkQiwAREREKsQC
QEREpEIsAERERCrEAkBERKRCLABEREQqxAJARESkQiwAREREKsQCQEREpEIsAERERCrEAkBERKRC
LABEREQqxAJARESkQiwAREREKsQCQEREpEIsAERERCrEAkBERKRCLABEREQqxAJARESkQiwARERE
KsQCQEREpEIsAERERCrEAkBERKRCLABEREQqxAJARESkQiwAREREKsQCQEREpEIsAERERCrEAkBE
RKRCLABEREQqxAJARESkQiwAREREKsQCQEREpEIsAERERCrEAkBERKRCLABEREQqxAJARESkQiwA
REREKsQCQEREpEIsAERERCrEAkBERKRCLABEREQqxAJARESkQiwAREREKsQCQEREpEIsAERERCrE
AkBERKRCLABEREQqxAJARESkQiwAREREKsQCQEREpEIsAERERCrEAkBERKRCLABEREQqxAJARESk
QiwAREREKsQCQEREpEIsAERERCrEAkBERKRCLABEREQqxAJARESkQiwAREREKsQCQEREpEIsAERE
RCrEAkBERKRCLABEREQqxAJARESkQiwAREREKnToBUCvs8+UiIiI3l4GMV4vrR1SARiZ12FRzEw2
CiIiInp7ycF/ekmrjN9vVADkhSXZJIiIiOjttzf4H0oBICIionfPgQrArVuu9YYdYFYL5YJERET0
btrYBkrKa16tAJw6dbpVTpyTX6q0BiIiIno3FYvxPCg49NUKAMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwb33+5m/+f79AJ8EPpptiAAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[[xml]$TPLATE = Get-Content .\rdr_template.xml

FUNCTION startup {
	REFRESH-XML
	$script:SIZE_CODES = $XML.RDR2.SIZE_CD.SIZE
	$datagrid_wiki.AutoSize = $true
	$datagridview_wiki.AutoSize = $true
	$datagridview_drops.AutoSize = $true
	$datagridview_cleankill.AutoSize = $true
}

FUNCTION REFRESH-XML {
	[xml]$SCRIPT:XML = Get-Content .\rdr2.xml
	$SCRIPT:LAST_A_ID = ($XML.RDR2.ANIMALS.ANIMAL.A_ID | MEASURE-OBJECT -Maximum).MAXIMUM
	$A_NAMES = $XML.RDR2.ANIMALS.ANIMAL | SELECT-OBJECT A_ID, NAME | Sort-Object { [int]$_.a_id }, NAME
	FOREACH ($NAME IN $A_NAMES) {
		UPDATE-COMBOBOX $combobox_name $NAME.NAME -APPEND
	}
}

FUNCTION NEW-ANIMAL {
	REFRESH-XML
	$NEWDATA = $TPLATE.ANIMAL.CLONE()
	$NEWDATA.A_ID = ($LAST_A_ID + 1).TOSTRING().PADLEFT(3, "0")
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()][System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)][ValidateNotNull()][System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)][ValidateNotNull()]$Items,
		[Parameter(Mandatory = $false)][string]$DisplayMember,
		[Parameter(Mandatory = $false)][string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
	$ComboBox.ValueMember = $ValueMember
}
#endregion

$combobox_name_SelectedIndexChanged={
	$A_SELECTED = $XML.rdr2.animals.animal | Where-Object { $_.A_ID -eq $combobox_name.SelectedIndex }
	<#$dtable = New-Object System.Data.DataTable
	$DATA_ELEMENTS = (($A_SELECTED | Get-Member) | Where-Object { $_.MEMBERTYPE -EQ "PROPERTY" }).NAME
	FOREACH ($COL IN $DATA_ELEMENTS) {
		$dtable.Columns.Add($COL)
	}
	$ROW = $dtable.NewRow()
	FOREACH ($ELM IN $DATA_ELEMENTS) {
		$ROW.$ELM = $A_SELECTED.$ELM
	}
	$dtable.Rows.ADD($ROW)	

	$datagrid1.DataSource = $dtable #>
	
	$text_a_id.Text = $A_SELECTED.A_ID
	$text_species.Text = $A_SELECTED.species
	$text_altname.Text = $A_SELECTED.ALTNAME
	$text_class.Text = $A_SELECTED.CLASS
	$text_locations.Text = $A_SELECTED.LOCATION_DESC
	$SIZE_DESC = ($SIZE_CODES | Where-Object {[int]$_.INDEX -eq [int]$A_SELECTED.SIZE_CD}).NAME
	$text_size.text = $SIZE_DESC
	IF ($A_SELECTED.carcass -eq "TRUE") { $checkbox_Carcass.CheckState = 'Checked' } ELSE { $checkbox_Carcass.CheckState = 'Unchecked'}
	IF ($A_SELECTED.ZOOLOGIST -eq "TRUE") { $checkbox_Zoologist.CheckState = 'Checked' } ELSE { $checkbox_Zoologist.CheckState = 'Unchecked' }
	IF ($A_SELECTED.SKIN_DEEP -eq "TRUE") { $checkbox_SkinDeep.CheckState = 'Checked' } ELSE { $checkbox_SkinDeep.CheckState = 'Unchecked'}
	IF ($A_SELECTED.NEW_AUSTIN_ONLY -eq "TRUE") { $checkboxEpilogueOnly.CheckState = 'Checked' } ELSE { $checkboxEpilogueOnly.CheckState = 'Unchecked'}
	IF ($A_SELECTED.GUARMA_ONLY -eq "TRUE") { $checkboxGuarmaOnly.CheckState = 'Checked' } ELSE { $checkboxGuarmaOnly.CheckState = 'Unchecked' }
	
	$wikitable = New-Object System.Data.DataTable
	$wikitable.Columns.Add("wiki")
	FOREACH ($wiki IN $A_SELECTED.wikipage) {
		$ROW = $wikitable.NewRow()
		$ROW.WIKI = $WIKI
		$wikitable.Rows.Add($ROW)
	}
	$datagridview_wiki.DataSource = $wikitable
	$datagridview_wiki.AutoSize = $true
	$datagridview_wiki.ClearSelection()
	
	$droptable = New-Object System.Data.DataTable
	$droptable.Columns.Add("drop")
	FOREACH ($drop IN $A_SELECTED.drop) {
		$ROW = $droptable.NewRow()
		$ROW.drop = $drop
		$droptable.Rows.Add($ROW)
	}
	$datagridview_drops.DataSource = $droptable
	$datagridview_drops.AutoSize = $true
	$datagridview_drops.ClearSelection()
	
	$killtable = New-Object System.Data.DataTable
	$killtable.Columns.Add("Weapon_Class")
	$killtable.Columns.Add("Ammo")
	$killtable.Columns.Add("Optimal")
	$WEAPONS = (($SIZE_CODES | Where-Object {[int]$_.INDEX -eq [int]$A_SELECTED.SIZE_CD}).CLEAN_KILL | sort-object optimal, weapon_class, ammo -Descending)
	FOREACH ($weapon IN $WEAPONS) {
		$ROW = $killtable.NewRow()
		$ROW.weapon_class = $weapon.weapon_class
		$ROW.ammo = $weapon.ammo
		IF ($weapon.OPTIMAL -eq "$TRUE") {$ROW.OPTIMAL = "Best Results"}
		$killtable.Rows.Add($ROW)
	}
	$datagridview_cleankill.DataSource = $killtable
	$datagridview_cleankill.AutoSize = $true
	$datagridview_cleankill.ClearSelection()
	$form1.Refresh()
}

$form1_Load={
	#TODO: Place custom script here
	STARTUP
	$datagrid_wiki.DataSource = [array]$XML.rdr2.animals.animal
}

#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}

#endregion

$tablelayoutpanel1_Paint=[System.Windows.Forms.PaintEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.PaintEventArgs]
	#TODO: Place custom script here
	
}

$labelWikiPages_Click={
	#TODO: Place custom script here
	
}

$labelDrops_Click={
	#TODO: Place custom script here
	
}

$groupbox2_Enter={
	#TODO: Place custom script here
	
}

$labelCleanKill_Click={
	#TODO: Place custom script here
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>